index

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script
      src="https://cdn.jsdelivr.net/gh/alpinejs/alpine@v2.x.x/dist/alpine.js"
      <!--salvat cod in d:Faculta-->
      defer
    ></script>
    <link rel="stylesheet" href="style.css" />
    <script src="app.js"></script>
    <title>QuicSort</title>
  </head>
  <body x-data="quickSortAlgorithm()" x-init="resetArrayItems()">
    <div class="container">
      <div class="controls">
        <button x-on:click="run()">Cum functioneaza metoda de sortare QuickSort</button>
        <button x-on:click="resetArrayItems()">Resetare</button>
      </div>
      <div class="visualizer">
        <template x-for="(item, index) in items" :key="index">
          <div :style="itemStyle(item, index)"></div>
        </template>
      </div>
    </div>
  </body>
</html>


java

let swap = (array, x, y) => ([array[x], array[y]] = [array[y], array[x]]);

let sleep = (ms = 1000) => new Promise((resolve) => setTimeout(resolve, ms));

function quickSortAlgorithm() {
  return {
    items: [],
    max: 640,
    currentlyCompared: [],
    itemStyle: function (item, index) {
      return `width: 2px; height: ${item}px; background-color: ${
        this.currentlyCompared.includes(index) ? "red" : "#fff"
      }`;
    },
    run() {
      this.quickSort(this.items, 0, this.items.length - 1);
    },
    resetArrayItems() {
      this.items = [];
      for (let i = 0; i < this.max; i++) {
        let random = Math.floor(Math.random() * this.max) + 6;
        while (!this.items.includes(random)) {
          this.items.push(random);
        }
      }
    },
    async quickSort(arr, start, end) {
      if (start >= end) {
        this.currentlyCompared = [];
        return;
      }

      let index = await this.partition(arr, start, end);

      await this.quickSort(arr, start, index - 1);
      await this.quickSort(arr, index + 1, end);
    },
    async partition(arr, start, end) {
      let pivotIndex = start;
      let pivot = arr[end];
      for (let i = start; i < end; i++) {
        if (arr[i] < pivot) {
          await sleep(1);
          swap(arr, i, pivotIndex);
          this.currentlyCompared = [i, pivotIndex];
          pivotIndex++;
        }
      }
      await sleep(1);
      swap(arr, pivotIndex, end);
      this.currentlyCompared = [pivotIndex, end];
      return pivotIndex;
    },
};
}



css



body {
    background-color: black;
}

button {
    margin: auto 3px;
}

.controls {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-bottom: 3px;
}

.visualizer {
    display: flex;
    align-items: end;
    justify-content: space-around;
}

.items {
    margin-top: 10px;
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-evenly;
}

.item {
    color: rgb(219, 81, 22);
    margin: auto 1px;
    border-radius: 3px;
    padding: 3px;
    background-color: rgb(90, 20, 239);
}

